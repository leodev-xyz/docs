
import fast_push, fast_extend, fast_iter, fast_filter, fast_map, print_tbl from require "leadoc.util"


export configs = 
    lua: 
        argument_start: "("
        argument_close: ")"
        no_arguments: "()"
        return_prefix: ": "
    yue:
        argument_start: " "
        argument_close: ""
        no_arguments: "!"
        return_prefix: " -> "

type_to_string = =>
    optional = @optional and "?" or ""
    prefix = @array and "[]" or ""
    content = @type
    content = "[" + table.concat([type_to_string t for t in *content], ", ") + "]" if "table" == type content
    "#{optional}#{prefix}#{content}"

description_to_string = =>
    return {@, n: 1} if "string" == type @
    l = @inner and @inner or @
    return {l, n: 1} if "string" == type l
    r = {n: 0}
    fast_extend r, description_to_string i for i in *l
    r

gather_nodes = =>
    return {@, n: 1} unless @tree?
    result = {@, n: 1}
    for child in fast_iter @tree
        fast_extend result, gather_nodes child unless child.flags.dont_include_in_snippet
    result

namespacing_nodes = {namespace: true, class: true}
normalize_string = => @gsub "[^a-zA-Z0-9]", ""

export generate_snippet = (doc, scope, config) ->
    result = {}
    nodes = gather_nodes {tree: doc.tree}
    for thing in fast_iter nodes
        continue unless thing.type == "function" or thing.type == "variable"
        name = fast_map fast_filter(thing.stack, => namespacing_nodes[doc.ids[@].type]), => doc.ids[@].data.name
        fast_push name, thing.data.name
        name = table.concat name, "."
        switch thing.type
            when "function"
                args = table.concat fast_map(thing.data.arguments, => @name), ", "
                args_with_types = table.concat fast_map(thing.data.arguments, => if @type then "#{@name}: #{type_to_string @type}" else @name), ", "
                prefix = "#{name}#{config.argument_start}#{args_with_types}#{config.argument_close}"
                prefix = "#{prefix}#{config.return_prefix}#{type_to_string thing.data.returns.type}" if thing.data.returns
                body = "#{name}#{config.argument_start}#{args}#{config.argument_close}"
                description = ""
                description = table.concat description_to_string inner: thing.data.description if thing.data.description
                result[normalize_string name] = {
                    :prefix
                    :body
                    :description
                    :scope
                }
            when "variable"
                prefix = name
                prefix = "#{prefix}: #{type_to_string thing.data.type.type}" if thing.data.type
                description = ""
                description = table.concat description_to_string inner: thing.data.description if thing.data.description
                result[normalize_string name] = {
                    :prefix
                    body: name
                    :description
                    :scope
                }
    result

